import path from 'path';
import fs from 'fs';
import express from 'express';
import { createServer as createViteServer } from 'vite';
import { openBrowser } from './browser';

const port = process.env.PORT || 3336;
const CACHE_DIRECTORY = './node_modules/.cache/jest-preview';
const INDEX_BASENAME = 'index.html';
const INDEX_PATH = path.join(CACHE_DIRECTORY, INDEX_BASENAME);
const PUBLIC_CONFIG_BASENAME = 'cache-public.config';
const PUBLIC_CONFIG_PATH = path.join(CACHE_DIRECTORY, PUBLIC_CONFIG_BASENAME);
const FAV_ICON_PATH = './node_modules/jest-preview/dist/cli/favicon.ico';

// Always set default public folder to `public` if not specified
let publicFolder = 'public';

if (fs.existsSync(PUBLIC_CONFIG_PATH)) {
  publicFolder = fs.readFileSync(PUBLIC_CONFIG_PATH, 'utf8').trim();
}

// Initialize cache directory and default HTML if needed
if (fs.existsSync(INDEX_PATH)) {
  // Remove old preview files (keeping configuration files)
  const files = fs.readdirSync(CACHE_DIRECTORY);
  files.forEach((file) => {
    if (!file.startsWith('cache-')) {
      fs.unlinkSync(path.join(CACHE_DIRECTORY, file));
    }
  });
} else {
  fs.mkdirSync(CACHE_DIRECTORY, {
    recursive: true,
  });
}

const defaultIndexHtml = `<!DOCTYPE html>
<html>
<head>
  <link rel="shortcut icon" href="${FAV_ICON_PATH}">
  <title>Jest Preview Dashboard</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover">
</head>
<body>
No preview found.<br/>
Please add following lines to your test: <br /> <br />
<div style="background-color: grey;width: fit-content;padding: 8px;">
  <code>
  import { debug } from 'jest-preview';
  <br />
  <br />
  // Inside your tests
  <br />
  debug();
  </code>
</div>
<br />
Then rerun your tests.
<br />
See an example in the <a href="https://www.jest-preview.com/docs/getting-started/usage#3-preview-your-html-from-jest-following-code-demo-how-to-use-it-with-react-testing-library" target="_blank" rel="noopener noreferrer">documentation</a>
</body>
</html>`;

fs.writeFileSync(INDEX_PATH, defaultIndexHtml);

async function createServer() {
  const app = express();

  // Create Vite server in middleware mode
  const vite = await createViteServer({
    server: {
      middlewareMode: true,
      watch: {
        // Watch the cache directory for changes
        // This enables HMR for the preview
        ignored: ['!**/node_modules/.cache/jest-preview/**'],
      },
    },
    // Configure Vite to properly watch our cache directory
    plugins: [
      {
        name: 'watch-jest-preview-cache',
        configureServer: (server) => {
          server.watcher.add(INDEX_PATH);
          server.watcher.add(PUBLIC_CONFIG_PATH);

          // When index.html changes, trigger HMR
          server.watcher.on('change', (filePath) => {
            if (path.basename(filePath) === INDEX_BASENAME) {
              // Send HMR update to the client
              server.ws.send({
                type: 'full-reload',
              });
            }

            if (path.basename(filePath) === PUBLIC_CONFIG_BASENAME) {
              publicFolder = fs.readFileSync(PUBLIC_CONFIG_PATH, 'utf8').trim();
            }
          });
        },
      },
    ],
    appType: 'custom',
  });

  // Use Vite's connect instance as middleware
  // This handles static file serving and HMR WebSocket connections
  app.use(vite.middlewares);

  // Custom middleware to handle the public folder and static assets
  app.use((req, res, next) => {
    // Skip for the root route
    if (req.path === '/') {
      return next();
    }

    // Check if the requested file exists in the current directory
    const filePath = path.join('.', req.path);
    if (!fs.existsSync(filePath)) {
      // Try looking in the public directory
      const publicPath = path.join(publicFolder, req.path);
      if (fs.existsSync(publicPath)) {
        return res.sendFile(path.resolve(publicPath));
      } else {
        // Log warning for missing files
        console.log('[WARN] File not found: ', req.path);
        console.log(`[WARN] Please check if ${req.path} exists.`);
        console.log(
          `[WARN] If it exists, likely you forget to setup the code transformation, or you haven't flushed the old cache yet. Try to run "./node_modules/.bin/jest --clearCache" to clear the cache.\n`,
        );
      }
    }

    next();
  });

  // Main route to serve the preview HTML
  app.use('/', async (req, res) => {
    try {
      // Read the index.html file generated by Jest Preview
      let html = fs.readFileSync(INDEX_PATH, 'utf-8');

      // Transform the HTML with Vite (this handles asset paths and HMR injection)
      html = await vite.transformIndexHtml(req.originalUrl, html);

      // Send the transformed HTML to the client
      res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
    } catch (e) {
      // Let Vite fix the error stack trace for better debugging
      vite.ssrFixStacktrace(e as Error);
      console.error(e);
      res.status(500).end((e as Error).message);
    }
  });

  // Start the server
  app.listen(port, () => {
    console.log(`Jest Preview Server listening on http://localhost:${port}`);
    openBrowser(`http://localhost:${port}`);
  });
}

// Start the server
createServer().catch((e) => {
  console.error('Error starting Jest Preview server:', e);
  process.exit(1);
});
